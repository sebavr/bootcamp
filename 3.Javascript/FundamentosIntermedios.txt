1.Sigma - Implementa una función sigma(num) que, dado un número, devuelve la suma de todos los enteros positivos (incluyendo el número dado). Ej: sigma(3) = 6 (1+2+3); sigma(5) = 15 (1+2+3+4+5).



function Sigma(num){
var sum=0;
for(var i=1;i<=num;i++){
	sum=sum+i;
	}
return sum;
}

console.log(Sigma(5));
	
		
	



2.Factorial - Escribe una función factorial(num) que, dado un número, devuelva el producto (multiplicación) de todos los enteros positivos (incluyendo el número dado). Por ejemplo: factorial(3) = 6 (1*2*3); factorial(5) = 120 (1*2*3*4*5).

function Factorial(num){
var mult=1;
for(var i=1;i<=num;i++){
	mult=mult*i;
	}
return mult;
}

console.log(Factorial(3));




3.Fibonacci - Crea una función para generar números de Fibonacci. En esta famosa secuencia matemática, cada número es la suma de las dos anteriores, partiendo con los valores 0 y 1. Tu función debería aceptar un argumento, un índice en la secuencia (donde 0 corresponde al valor inicial, 4 corresponden al valor cuatro más tarde, etc). Ejemplos: fibonacci(0) = 0 (dado), fibonacci(1) = 1 (dado), fibonacci(2) = 1 (fib(0)+fib(1), o 0+1), fibonacci(3) = 2 (fib(1) + fib(2)3, o 1+1), fibonacci(4) = 3 (1+2), fibonacci(5) = 5 (2+3), fibonacci(6) = 8 (3+5), fibonacci(7) = 13 (5+8). Haz esto primero sin usar recursión. Si no sabes qué es una recursión, no te preocupes puesto que vamos a introducir este concepto en la Parte 2 de esta actividad. 

 function Fibonacci(num) {
            var fib = [];

            for (var i = 0; i < 2; i++) {
                fib[i] = i;

            }

            for (var i = 2; i <= num; i++) {
                fib[i] = fib[i - 1] + fib[i - 2]

            }
            return fib[num];

        }

        console.log(Fibonacci(6));





4.Array: Penúltimo: Devuelve el penúltimo elemento del array. Dado [42,true,4,”Liam”, 7] devuelve “Liam”. Si el array es muy pequeño, devuelve null.  


arr=[42,true,4,"Liam", 7]

function Penultimo(arr){
if(arr.length<2){
console.log("null");
}
else{
p=arr[arr.length-2];
return p;
}
}
console.log(Penultimo(arr));





5.Array: “N” último: Devuelve el elemento “N” último. Dado ([5,2,3,6,4,9,7],3], devuelve 6. Si el array es muy pequeño, devuelve null. 

arr=[5,2,3,6,4,9,7];
n=6;
function nultimo(arr,n){
if(arr.length<2){
console.log("null");
}
else{
p=arr[arr.length-n];
return p;
}
}
console.log(nultimo(arr,n));






6.Array: Segundo más grande: Devuelve el segundo elemento más grande de un array. Dado [42,1,4,3.14,7], devuelve 7.  Si el array es muy pequeño, devuelve null.


      arr = [-99, 1, 4, 1000, -45, 100, 88, 90, 101, 1023];

        function segundoGrande(arr) {
            var max = arr[0];
            var max2 = arr[0];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] > max) {
                    max2 = max;
                    max = arr[i];
                } else if (arr[i] > max2 && arr[i] < max) {
                    max2 = arr[i];
                }
            }
		
            return max2;

        }

        console.log(segundoGrande(arr));


7.Doble Problema Par: Crea una función que cambie un array dado duplicando cada uno de sus elementos en una posición par, y manteniendo el orden original. Convierte [4, "Ulysses", 42, false]   a    [4,4, "Ulysses", "Ulysses", 42, 42, false, false].



x=[4,"Ulysses", 42, false];

function repetirValores(x){
var v=[];
	
	for(var i=0;i<x.length;i++){
	v.push(x[i]);
	v.push(x[i]);
}
return v;
}
console.log(repetirValores(x));